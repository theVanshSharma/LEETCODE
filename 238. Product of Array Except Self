Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

link = https://leetcode.com/problems/product-of-array-except-self/


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        # n=len(nums)
        # pre = [1]*n
        # # pre[0] = 1
        # for i in range(1,n):
        #     pre[i] = nums[i-1] * pre[i-1]
        # suf = [1]*n
        # # suf[n-1] = 1
        # for i in range(n-2,-1,-1):
        #     suf[i] = suf[i+1] * nums[i+1]
        # ans = [1]*n
        # for i in range(0,n):
        #     ans[i] = pre[i] * suf[i]
        # return ans

        n = len(nums)
        answer = [1] * n  # Initialize the answer array with 1s

        # Step 1: Calculate prefix product for each element
        prefix = 1
        for i in range(n):
            answer[i] = prefix  # answer[i] stores product of all elements before nums[i]
            prefix *= nums[i]   # Update the prefix product for the next index

        # Step 2: Calculate suffix product and multiply it with the current answer array
        suffix = 1
        for i in range(n-1, -1, -1):
            answer[i] *= suffix  # Multiply by the suffix product
            suffix *= nums[i]    # Update the suffix product for the next index

        return answer
